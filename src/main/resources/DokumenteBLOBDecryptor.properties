-- ====Modus========================================================================================================================
-- ====Running Modes========================================================================================================================
-- Mode: BLOB aus SourceDataBase lesen
-- Mode: Reading BLOB from SourceDataBase
#FromDataBaseDecrypt=0
#SelectCryptDataAndId=SELECT MELDID AS ID, VOLLMCEPDATA AS BLOBDATA FROM MELDUNGEN_BKP1 ORDER BY MELDID
# -- SelectCryptDataAndId=SELECT MELDID AS ID, CRYPTDATA AS BLOBDATA FROM MELDUNGEN WHERE MELDID='005672a0-cd1b-4b68-a435-da605a7a9a04' ORDER BY MELDID 
#SelectCryptDataAndId=SELECT MELDID AS ID, CRYPTDATA AS BLOBDATA FROM MELDUNGEN WHERE MELDID='403' ORDER BY MELDID
-- SourceDatabase
SourceDatabaseDriver=oracle.jdbc.driver.OracleDriver
SourceDatabaseUrl=jdbc:oracle:thin:@172.31.0.75:1521:BNOTK
SourceDatabaseUsername=BNOTK_ZVR_MIG_LEGACY
SourceDatabasePassword=password
-- Entschluesseltes XML in die Tabelle der TargetDatabase als Update schreiben
-- Updated Blodbdate of decyrypted XML into Target Database Table
#DecryptToDBTableAsUpdatte=0
#UPDATE_DECRYPTDATA_PreparedStatement=UPDATE MELDUNGEN SET CRYPTDATA = ? WHERE MELDID = ?
-- Entschluesseltes XML in die Tabelle der TargetDatabase als Insert schreiben
-- Insert decyrypted XML into Target Database Table
#DecryptToDBTableAsInsert=1
#INSERT_DECRYPTDATA_PreparedStatement=INSERT INTO MELDUNGEN_DECRYPTDATA (ID, DECRYPTDATA) VALUES (?, ?)
-- TargetDatabase
TargetDatabaseDriver=oracle.jdbc.driver.OracleDriver
TargetDatabaseUrl=jdbc:oracle:thin:@172.31.0.75:1521:BNOTK
TargetDatabaseUsername=BNOTK_ZVR_MIG_T
#TargetDatabaseUsername=BNOTK_ZVR_MIG_LEGACY
TargetDatabasePassword=password
-- Entschluesseltes XML in Datei schreiben ID im Dateinamen zwischen Prefix und Suffix
-- Write decrypted XML onto filesystem, take ID as filename between Prefix and Suffix
#DecryptToXMLFile=0
#OutputFolder=C:\\Users\\andrej.teske\\workspace\\BNOTK\\src\\BNOTK\\Examples\\
#OutputFolder==C:/Users/premendra.kumar/Desktop/input Data/4/output/uu/
#OutputFileNamePrefix=BLOBData_
#OutputFileNameSuffix=_.xml
-- ====MODUS========================================================================================================================
-- Modus für alle Dateien in dem Inputordner -> aus einer verschlüsselten Datei in eine unverschlüsselte schreiben
-- This Mode reads all blobs with correct suffix out of Inputfolder -> It is an Input for Encrypted files
#FromFilesDecryp=0
##InputFolder=C:\\Users\\andrej.teske\\workspace\\BNOTK\\src\\BNOTK\\Examples\\
#InputFolder=C:/Users/premendra.kumar/Desktop/input Data/4/output/
#Archivieren=1
##ArchivFolder=C:\\Users\\andrej.teske\\workspace\\BNOTK\\src\\BNOTK\\Examples\\Archive\\
#ArchivFolder=C:/Users/premendra.kumar/Desktop/input Data/4/output/uu/
#InputFileSuffix=.blob
-- ====MODUS========================================================================================================================
-- Modus eine "verschlüsselte" Datei unverändert in die Datenbank schreiben
-- Default: TestDataUpdate=0 
-- TestFall: Wenn TestDataUpdate=1 dann schreibe in ein vorhandenes Datensatz 
-- mit der ID "TestToBeUpdatedDataSetID" 
-- das verschlüsselte BLOB 
-- aus der Datei "TestEncryptedBLOBFileName"
-- This Mode writes a file into Database without changing it
-- Default: TestDataUpdate=0 
-- Testcae for: If TestDataUpdate=1 then wirte into existing Datensatz 
-- with ID "TestToBeUpdatedDataSetID" 
-- the encrypted bob from File "TestEncryptedBLOBFileName" 
#TestDataUpdate=0
#-- TestEncryptedBLOBFileName=C:\\Users\\andrej.teske\\workspace\\BNOTK\\src\\BNOTK\\Examples\\data.blob
#TestEncryptedBLOBFileName=C:\\Users\\andrej.teske\\workspace\\BNOTK\\src\\BNOTK\\Examples\\teste7cd3d6b-13d1-4fcc-a23c-37a965769c03
#TestToBeUpdatedDataSetID=7c2c025d-a45e-4b3f-b1fb-eb57b3add98a
#UPDATE_ENCRYPTDATA_PreparedStatement=UPDATE MELDUNGEN SET VOLLMCEPDATA = ? WHERE MELDID = ?
-- ====MODUS========================================================================================================================
-- Modus alle Dateien aus einem Verzeichniss jeweils zippen verschlüsseln und in die datenbank als Update schreiben
-- ====MODUS========================================================================================================================
-- All Files in Directory will be zipped encrypet and updated into the Database
#FromFileEncryptDataToDBAsUpdate=0
##InputFolderVerschluesseln=C:\\Users\\andrej.teske\\workspace\\BNOTK\\src\\BNOTK\\Examples\\encrypt\\
#InputFolderVerschluesseln=C:/Users/premendra.kumar/Desktop/input Data/4/
#ArchivierenVerschluesselung=1
##ArchivFolderVerschluesseln=C:\\Users\\andrej.teske\\workspace\\BNOTK\\src\\BNOTK\\Examples\\encrypt\\archive\\
#ArchivFolderVerschluesseln=C:/Users/premendra.kumar/Desktop/input Data/4/archive/
#InputFileSuffixVerschluesseln=.xml
##UPDATE_DATA_AFTER_ENCRYPT_PreparedStatement=UPDATE MELDUNGEN SET VOLLMCEPDATA = ? WHERE MELDID = ?
#UPDATE_DATA_AFTER_ENCRYPT_PreparedStatement=UPDATE MELDUNGEN_BKP1 SET VOLLMCEPDATA = ? WHERE MELDID = 403
#EncryptToXMLFile=1
##OutputFolderVerschluesseln=C:\\Users\\andrej.teske\\workspace\\BNOTK\\src\\BNOTK\\Examples\\encrypt\\
#OutputFolderVerschluesseln=C:/Users/premendra.kumar/Desktop/input Data/4/output/
#-- OutputFileNamePrefixVerschluesseln=BLOBData_
#OutputFileNamePrefixVerschluesseln=
#OutputFileNameSuffixVerschluesseln=.blob


==== Modus == Additional values defined for parallelization ==============================

FromDatabaseParallelDecrypt=1

ProcessAndWriteExecutorsThreadPoolSize=2
#WriteExecutorsThreadPoolSize=80
WriteExecutorsThreadPoolSize=4

NumberOfRecordsToBeReadFromDokumente=10
sizeOfTheReadingChunkFromDokumente=5
sizeOfTheWritingChunkIntoDokumente=5

#SelectCryptDataAndIdPagingQuery=SELECT MELDID AS ID, VOLLMCEPDATA AS BLOBDATA, MELDNR  FROM MELDUNGEN_BKP1 ORDER BY MELDID OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
#SelectCryptDataAndIdPagingQuery=SELECT ID,BLOBDATA,MELDNR FROM (SELECT ID,BLOBDATA,MELDNR, rownum AS rnum FROM (SELECT MELDID AS ID,VOLLMCEPDATA AS BLOBDATA,MELDNR FROM MELDUNGEN_BKP1 ORDER BY MELDNR) WHERE rownum <=?) WHERE  rnum > ? and MELDNR NOT IN (SELECT MELDNR FROM MELDUNGEN_DECRYPTDATA_STATUS)

#SelectCryptDataAndIdPagingQuery=SELECT DOKID,DOKTYP,CRETMS,DRUCKTMS,ALFRESCOKZ,GELESENTMS,MELDID,VMID,ANZSEITEN,BEVOLLMNR,DOKBEZ,DOKDATA,LANDKZ FROM (SELECT DOKID,DOKTYP,CRETMS,DRUCKTMS,ALFRESCOKZ,GELESENTMS,MELDID,VMID,ANZSEITEN,BEVOLLMNR,DOKBEZ,DOKDATA,LANDKZ, rownum AS rnum FROM (SELECT DOKID,DOKTYP,CRETMS,DRUCKTMS,ALFRESCOKZ,GELESENTMS,MELDID,VMID,ANZSEITEN,BEVOLLMNR,DOKBEZ,DOKDATA,LANDKZ FROM DOKUMENTE WHERE DOKID NOT IN (SELECT DOKID FROM TMPDOKUMENTE_STATUS) AND DOKTYP IN (SELECT DOKTYP FROM DOKTYPEVM) ORDER BY DOKID ) WHERE rownum <=?) WHERE  rnum > ?
#selectTotalDokCountQuery=SELECT COUNT(DOKID) AS TOTAL_COUNT FROM DOKUMENTE WHERE DOKDATA IS NOT NULL AND DOKTYP IN (SELECT DOKTYP FROM DOKTYPEVM)

SelectCryptDataAndIdPagingQuery=SELECT DOKID,DOKTYP,CRETMS,DRUCKTMS,ALFRESCOKZ,GELESENTMS,MELDID,VMID,ANZSEITEN,BEVOLLMNR,DOKBEZ,DOKDATA,LANDKZ FROM (SELECT DOKID,DOKTYP,CRETMS,DRUCKTMS,ALFRESCOKZ,GELESENTMS,MELDID,VMID,ANZSEITEN,BEVOLLMNR,DOKBEZ,DOKDATA,LANDKZ, rownum AS rnum FROM (SELECT DOKID,DOKTYP,CRETMS,DRUCKTMS,ALFRESCOKZ,GELESENTMS,MELDID,VMID,ANZSEITEN,BEVOLLMNR,DOKBEZ,DOKDATA,LANDKZ FROM DOKUMENTE WHERE DOKTYP IN (SELECT DOKTYP FROM DOKTYPEVM) ORDER BY DOKID ) WHERE rownum <=?) WHERE  rnum > ?
selectTotalDokCountQuery=SELECT COUNT(DOKID) AS TOTAL_COUNT FROM DOKUMENTE WHERE DOKDATA IS NOT NULL AND DOKTYP IN (SELECT DOKTYP FROM DOKTYPEVM)

selectDoktypeVmData=SELECT DOKTYP,DOKUMENTART FROM DOKTYPEVM

#SelectCryptDataAndIdPagingQuery=SELECT MELDID AS ID,VOLLMCEPDATA AS BLOBDATA,MELDNR FROM MELDUNGEN WHERE MELDNR <=? And MELDNR > ?
#selectTotalDokCountQuery=SELECT Max(Meldnr+1) AS TOTAL_COUNT FROM MELDUNGEN


#SelectCryptDataAndIdPagingQuery=SELECT ID,BLOBDATA,MELDNR FROM (SELECT ID,BLOBDATA,MELDNR, rownum AS rnum FROM (SELECT MELDID AS ID,VOLLMCEPDATA AS BLOBDATA,MELDNR FROM MELDUNGEN ORDER BY MELDNR) WHERE rownum <=?) WHERE  rnum > ?
#selectTotalDokCountQuery=SELECT COUNT(MELDID) AS TOTAL_COUNT FROM MELDUNGEN WHERE VOLLMCEPDATA IS NOT NULL

updateSDSIDQuery=UPDATE TMPDOKUMENTE SET SDSID = ? WHERE DOKID=?

#insertSDSIDStatusPreparedStatementSQL=INSERT INTO MELDUNGEN_DECRYPTDATA_STATUS (MELDNR, STATUS) VALUES (?, ?)
insertSDSIDStatusPreparedStatementSQL=INSERT INTO TMPDOKUMENTE_STATUS (DOKID, STATUS) VALUES (?, ?)


SDSRestServerURL=https://cs-sds-1-test-01.test.bnotk.net:8443/sds/documentstore/v1
SDSRestServerApp=testuserapp
SDSRestServerUser=testuser
SDSRestServerPassword=password
#SDSRestServerUser=testuser
#SDSRestServerPassword=password


EnableDetailedLogs=0

#SourceDatabaseInitialPoolSize=24
#SourceDatabaseMinPoolSize=24
#SourceDatabaseAcquireIncrement=100
#SourceDatabaseMaxPoolSize=400
#SourceDatabaseMaxStatements=360

SourceDatabaseInitialPoolSize=2
SourceDatabaseMinPoolSize=2
SourceDatabaseAcquireIncrement=5
SourceDatabaseMaxPoolSize=4
SourceDatabaseMaxStatements=3600

#TargetDatabaseInitialPoolSize=120
#TargetDatabaseMinPoolSize=120
#TargetDatabaseAcquireIncrement=4000
#TargetDatabaseMaxPoolSize=800
#TargetDatabaseMaxStatements=3600

TargetDatabaseInitialPoolSize=2
TargetDatabaseMinPoolSize=2
TargetDatabaseAcquireIncrement=10
TargetDatabaseMaxPoolSize=6
TargetDatabaseMaxStatements=3600




